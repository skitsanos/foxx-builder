# CircleCI configuration file version 2.1
version: 2.1

# Use orbs for simplified configuration
orbs:
  node: circleci/node@5.1.0

# Define reusable commands
commands:
  install-hurl:
    description: "Install the Hurl HTTP testing tool"
    steps:
      - run:
          name: "Install Hurl"
          command: |
            curl -LO https://github.com/Orange-OpenSource/hurl/releases/download/4.1.0/hurl_4.1.0_amd64.deb
            sudo dpkg -i hurl_4.1.0_amd64.deb

  wait-for-arangodb:
    description: "Wait for ArangoDB to be ready"
    parameters:
      max_wait:
        type: integer
        default: 60
    steps:
      - run:
          name: "Waiting for ArangoDB to Initialize"
          command: |
            wait_for_url () {
                echo "Testing $1"
                max_in_s=$2
                delay_in_s=1
                total_in_s=0
                while [ $total_in_s -le "$max_in_s" ]
                do
                  echo "Wait ${total_in_s}s"
                  if (echo -e "GET $1\nHTTP/* *" | hurl > /dev/null 2>&1;) then
                    return 0
                  fi
                  total_in_s=$(( total_in_s +  delay_in_s))
                  sleep $delay_in_s
                done
                return 1
            }
            wait_for_url 'http://localhost:8529' << parameters.max_wait >>

# Define jobs
jobs:
  api-test:
    # Explicitly specify the executor type with the latest LTS Node.js version
    executor:
      name: node/default
      tag: '20.10.0'
    resource_class: large
    environment:
      ARANGO_USER: dev
      ARANGO_PASSWORD: sandbox
      ARANGO_DB: dev
      ARANGO_ROOT_PASSWORD: openSesame
      ARANGO_VERSION: "3.10.4"
    steps:
      - checkout
      
      # Setup tools and dependencies - using basic cache without checksum
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          cache-version: v1
          override-ci-command: npm install
      
      - run:
          name: "Install Foxx CLI"
          command: npm install -g foxx-cli
      
      - install-hurl
      
      # Setup remote docker
      - setup_remote_docker
      
      # Start ArangoDB using docker run instead of docker-compose
      - run:
          name: "Start ArangoDB"
          command: |
            # Create backup directory for volume mounting
            mkdir -p .backup
            
            # Run ArangoDB container
            docker run \
              --name arangodb-dev \
              -p 8529:8529 \
              -e ARANGO_ROOT_PASSWORD=${ARANGO_ROOT_PASSWORD} \
              -v $(pwd)/.backup:/backup \
              -d arangodb/arangodb:${ARANGO_VERSION}
          background: false
      
      - wait-for-arangodb:
          max_wait: 90
      
      # Setup Database
      - run:
          name: "Setup Database"
          command: |
            docker exec arangodb-dev arangosh \
              --server.username root \
              --server.password ${ARANGO_ROOT_PASSWORD} \
              --javascript.execute-string "db._createDatabase('${ARANGO_DB}',{},[{username: '${ARANGO_USER}', passwd: '${ARANGO_PASSWORD}', active: true}]);"
      
      # Register and install Foxx Service
      - run:
          name: "Register Foxx API services"
          command: |
            foxx server set dev http://${ARANGO_USER}:${ARANGO_PASSWORD}@localhost:8529
      
      - run:
          name: "Install API services"
          command: |
            foxx install /api . --server dev --database ${ARANGO_DB}
      
      # Run API tests with reporting
      - run:
          name: "Run API tests"
          command: |
            mkdir -p test-results/hurl
            hurl --test \
              --report-junit test-results/hurl/results.xml \
              --variables-file .api-test/.vars \
              .api-test/*.hurl
      
      # Store test results and artifacts
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          path: test-results
          destination: test-reports

# Define workflow
workflows:
  test-api-services:
    jobs:
      - api-test
