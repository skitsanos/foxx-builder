name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  ARANGO_USER: dev
  ARANGO_PASSWORD: sandbox
  ARANGO_DB: dev
  ARANGO_ROOT_PASSWORD: openSesame

jobs:
  api-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start ArangoDB
        run: |
          # Create backup directory for volume mounting
          mkdir -p .backup
          
          # Run ArangoDB container
          docker run \
            --name arangodb-dev \
            -p 8529:8529 \
            -e ARANGO_ROOT_PASSWORD=${ARANGO_ROOT_PASSWORD} \
            -v $(pwd)/.backup:/backup \
            -d arangodb/arangodb:latest

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install Foxx CLI
        run: bun add -g foxx-cli

      - name: Install Hurl
        run: |
          curl -LO https://github.com/Orange-OpenSource/hurl/releases/download/4.1.0/hurl_4.1.0_amd64.deb
          sudo dpkg -i hurl_4.1.0_amd64.deb

      - name: Wait for ArangoDB
        run: |
          max_wait=120
          delay=2
          total=0
          
          echo "Waiting for ArangoDB to be ready..."
          while [ $total -le $max_wait ]; do
            if curl -f http://localhost:8529/_api/version > /dev/null 2>&1; then
              echo "ArangoDB is ready!"
              echo "Testing connection with credentials..."
              if curl -f -u "root:${ARANGO_ROOT_PASSWORD}" http://localhost:8529/_api/version > /dev/null 2>&1; then
                echo "ArangoDB authentication working!"
                break
              fi
            fi
            echo "Wait ${total}s / ${max_wait}s"
            total=$((total + delay))
            sleep $delay
          done
          
          if [ $total -gt $max_wait ]; then
            echo "ArangoDB failed to start within ${max_wait}s"
            exit 1
          fi

      - name: Setup Database
        run: |
          # Create database and user using arangosh
          docker exec arangodb-dev arangosh \
            --server.username root \
            --server.password ${ARANGO_ROOT_PASSWORD} \
            --javascript.execute-string "db._createDatabase('${ARANGO_DB}',{},[{username: '${ARANGO_USER}', passwd: '${ARANGO_PASSWORD}', active: true}]);"

      - name: Register Foxx API services
        run: |
          foxx server set dev http://${ARANGO_USER}:${ARANGO_PASSWORD}@localhost:8529

      - name: Install API services
        run: |
          foxx install /api . --server dev --database ${ARANGO_DB}

      - name: Run API tests
        run: |
          mkdir -p test-results/hurl
          hurl --test \
            --report-junit test-results/hurl/results.xml \
            --variables-file .api-test/.vars \
            .api-test/*.hurl

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: API Tests
          path: test-results/hurl/results.xml
          reporter: java-junit