#
# Taskfile is a simple task runner that lets you build, test and run tasks
# against your codebase. It is heavily inspired by Taskfile from the Go world.
#
# @author Skitsanos, https://github.com/skitsanos
# @version 2.1.0
#
version: '3'

vars:
  # Server and database configuration
  DATABASE_NAME: foxx-sandbox
  SERVER_HOST: http://localhost

  # API endpoints for different environments
  API_ENDPOINT_DEV: /api-dev
  API_ENDPOINT_PROD: /api

  # Testing configuration
  HURL: hurl --variables-file ./tests/hurl/.vars
  HURL_TEST_URL: --variable URL=http://localhost:8529/_db/{{.DATABASE_NAME}}{{.API_ENDPOINT_DEV}}

  # Docker configuration
  DOCKER_BIND_PORT: 8529
  DOCKER_ROOT_USERNAME: root
  DOCKER_ROOT_PASSWORD: openSesame
  DOCKER_CREDENTIALS: --server.username {{.DOCKER_ROOT_USERNAME}} --server.password {{.DOCKER_ROOT_PASSWORD}}

  # Deployment tool configuration
  DEPLOY_TOOL: foxx
  DEPLOY_SERVER_DOCKER: dev
  DEPLOY_SERVER_DEV: dev

  # Console colors for better readability
  RED: "\e[31m"
  GREEN: "\e[32m"
  GREEN_BOLD: "\e[1;32m"
  YELLOW: "\e[33m"
  BLUE: "\e[34m"
  ENDCOLOR: "\e[0m"

silent: true

tasks:
  #
  # Setup docker container and create a database
  # This task creates a new ArangoDB docker container if it doesn't exist yet,
  # waits for it to be ready, and then creates the target database if needed.
  #
  docker-db-setup:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Creating ArangoDB server within Docker{{.ENDCOLOR}}"
          docker ps --filter "name=arangodb-{{.DATABASE_NAME}}" | grep -w "arangodb-{{.DATABASE_NAME}}" \
          || docker run -d --restart=always --name "arangodb-{{.DATABASE_NAME}}" -p {{.DOCKER_BIND_PORT}}:8529 -e ARANGO_ROOT_PASSWORD={{.DOCKER_ROOT_PASSWORD}} -v $(pwd)/.backup:/backup arangodb/arangodb:latest
          
          echo -e "{{.BLUE}}Waiting for the ArangoDB to come up{{.ENDCOLOR}}"
          
          wait_for_url () {
                echo -e "{{.BLUE}}√: Testing $1{{.ENDCOLOR}}"
                max_in_s=$2
                delay_in_s=1
                total_in_s=0
                while [ $total_in_s -le "$max_in_s" ]
                do
                  echo -e "√: Wait ${total_in_s}s{{.ENDCOLOR}}"
                  if (docker exec arangodb-{{.DATABASE_NAME}} arangosh {{.DOCKER_CREDENTIALS}} --javascript.execute-string "try { if (!db._databases().includes('_system')) {process.exit(1)}}catch{process.exit(1)}" 2>&1;) then
                    return 0
                  fi
                  total_in_s=$(( total_in_s +  delay_in_s))
                  sleep $delay_in_s
                done
                return 1
            }
          
          wait_for_url 'http://localhost:{{.DOCKER_BIND_PORT}}' 60
          
          echo -e "{{.GREEN}}ArangoDB Server is up and running{{.ENDCOLOR}}"

      - cmd: |
          ARANGOSH_CMD_CHECK_EXISTS="if (db._databases().includes('{{.DATABASE_NAME}}')) {print('exists'); process.exit(0);} else {print('not exists'); process.exit(0);}"          
          DB_EXISTS=$(docker exec arangodb-{{.DATABASE_NAME}} arangosh {{.DOCKER_CREDENTIALS}} --javascript.execute-string "$ARANGOSH_CMD_CHECK_EXISTS")
          
          if [[ "$DB_EXISTS" == "not exists" ]]; then
            echo -e "{{.GREEN}}Database does not exist. Creating ...{{.ENDCOLOR}}"
            ARANGOSH_CMD_CREATE_DB="db._createDatabase('{{.DATABASE_NAME}}',{},[{username: 'dev', passwd: 'sandbox', active: true}])"
            docker exec arangodb-{{.DATABASE_NAME}} arangosh {{.DOCKER_CREDENTIALS}} --javascript.execute-string "$ARANGOSH_CMD_CREATE_DB"
          else
            echo -e "{{.GREEN}}Database exists{{.ENDCOLOR}}"
          fi

  #
  # Create a database backup
  # This task dumps the current database to the backup directory
  # mounted to the Docker container.
  #
  docker-db-backup:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Creating database backup...{{.ENDCOLOR}}"
          docker exec arangodb-{{.DATABASE_NAME}} arangodump --overwrite true --server.database {{.DATABASE_NAME}} {{.DOCKER_CREDENTIALS}} --output-directory /backup
          echo -e "{{.GREEN}}Backup completed successfully{{.ENDCOLOR}}"

  #
  # Restore the database from backup
  # This task restores the database from a previously created backup.
  #
  docker-db-restore:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Restoring database from backup...{{.ENDCOLOR}}"
          docker exec arangodb-{{.DATABASE_NAME}} arangorestore --server.database {{.DATABASE_NAME}} {{.DOCKER_CREDENTIALS}} --input-directory /backup
          echo -e "{{.GREEN}}Database restored successfully{{.ENDCOLOR}}"

  #
  # Run all API tests
  # Executes all the API tests defined in the .api-test directory.
  #
  test:
    cmds:
      - cmd: |
          echo -e "\n{{.BLUE}}Running API tests{{.ENDCOLOR}}"
      - cmd: |
          echo -e "\n{{.BLUE}}Testing {hello}{{.ENDCOLOR}}"
          {{.HURL}} {{.HURL_TEST_URL}} ./tests/hurl/hello.hurl

  #
  # Run a specific API test by name
  # Allows running a single test by providing its name without the .hurl extension.
  #
  test-one:
    cmds:
      - cmd: |
          read -p "{{.BLUE}}API Test to run:{{.ENDCOLOR}}" TEST_TO_RUN
          {{.HURL}} {{.HURL_TEST_URL}} "./tests/hurl/${TEST_TO_RUN}.hurl"
          echo -e "{{.ENDCOLOR}}\n"

  #
  # List all installed Foxx services
  # This task lists all microservices installed on the specified database.
  #
  list-services:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Listing Foxx services in Docker...{{.ENDCOLOR}}"
          {{.DEPLOY_TOOL}} list --server {{.DEPLOY_SERVER_DOCKER}} --database {{.DATABASE_NAME}}

  #
  # Deploy a development version to Docker
  # This task deploys the service to the development endpoint in the Docker container,
  # using our custom deployment tool instead of foxx-cli.
  #
  deploy-docker:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Checking if service exists at {{.API_ENDPOINT_DEV}}...{{.ENDCOLOR}}"
          
          # Get the list of services
          SERVICES=$({{.DEPLOY_TOOL}} list --server {{.DEPLOY_SERVER_DOCKER}} --database {{.DATABASE_NAME}})
          
          # Check if our service is already installed
          if echo "$SERVICES" | grep -q "{{.API_ENDPOINT_DEV}}"; then
            echo -e "{{.BLUE}}Replacing service at {{.API_ENDPOINT_DEV}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} replace {{.API_ENDPOINT_DEV}} . --server {{.DEPLOY_SERVER_DOCKER}} --database {{.DATABASE_NAME}}
          else
            echo -e "{{.BLUE}}Installing service at {{.API_ENDPOINT_DEV}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} install {{.API_ENDPOINT_DEV}} . --server {{.DEPLOY_SERVER_DOCKER}} --database {{.DATABASE_NAME}}
          fi
          echo -e "{{.GREEN}}Deployment to Docker completed successfully{{.ENDCOLOR}}"

  #
  # Deploy a development version
  # This task deploys the service to the development endpoint in a regular (non-Docker) ArangoDB instance,
  # using our custom deployment tool instead of foxx-cli.
  #
  deploy-dev:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Checking if service exists at {{.API_ENDPOINT_DEV}}...{{.ENDCOLOR}}"
          
          # Get the list of services
          SERVICES=$({{.DEPLOY_TOOL}} list {{.DEPLOY_ARGS_DEV}})
          
          # Check if our service is already installed
          if echo "$SERVICES" | grep -q "{{.API_ENDPOINT_DEV}}"; then
            echo -e "{{.BLUE}}Replacing service at {{.API_ENDPOINT_DEV}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} replace {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_DEV}}
          else
            echo -e "{{.BLUE}}Installing service at {{.API_ENDPOINT_DEV}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} install {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_DEV}}
          fi
          echo -e "{{.GREEN}}Development deployment completed successfully{{.ENDCOLOR}}"

  #
  # Deploy a production version
  # This task runs tests first, then deploys the service to the production endpoint,
  # using our custom deployment tool instead of foxx-cli.
  # Requires manual confirmation before deploying to production.
  #
  deploy-prod:
    prompt: You are deploying to production environment. Please confirm.
    cmds:
      - task: test
      - cmd: |
          echo -e "{{.BLUE}}Checking if service exists at {{.API_ENDPOINT_PROD}}...{{.ENDCOLOR}}"
          
          # Get the list of services
          SERVICES=$({{.DEPLOY_TOOL}} list {{.DEPLOY_ARGS_DEV}})
          
          # Check if our service is already installed
          if echo "$SERVICES" | grep -q "{{.API_ENDPOINT_PROD}}"; then
            echo -e "{{.BLUE}}Replacing service at {{.API_ENDPOINT_PROD}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} replace {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_PROD}}
          else
            echo -e "{{.BLUE}}Installing service at {{.API_ENDPOINT_PROD}} endpoint{{.ENDCOLOR}}"
            {{.DEPLOY_TOOL}} install {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_PROD}}
          fi
          echo -e "{{.GREEN}}Production deployment completed successfully{{.ENDCOLOR}}"

  #
  # Uninstall a development version
  # This task removes the service from the development endpoint.
  #
  uninstall-dev:
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Uninstalling service from {{.API_ENDPOINT_DEV}} endpoint...{{.ENDCOLOR}}"
          {{.DEPLOY_TOOL}} uninstall {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_DEV}}
          echo -e "{{.GREEN}}Service uninstalled successfully{{.ENDCOLOR}}"

  #
  # Uninstall a production version
  # This task removes the service from the production endpoint.
  # Requires manual confirmation before uninstalling from production.
  #
  uninstall-prod:
    prompt: You are uninstalling from production environment. Please confirm.
    cmds:
      - cmd: |
          echo -e "{{.BLUE}}Uninstalling service from {{.API_ENDPOINT_PROD}} endpoint...{{.ENDCOLOR}}"
          {{.DEPLOY_TOOL}} uninstall {{.DEPLOY_ARGS_DEV}} -m {{.API_ENDPOINT_PROD}}
          echo -e "{{.GREEN}}Service uninstalled successfully{{.ENDCOLOR}}"
